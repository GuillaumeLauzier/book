import UIKit

class Book {
    var title: String
    var author: String
    var publisher: String
    var isbn: UInt64
    var year: UInt

    init(title: String, author: String, publisher: String, isbn: UInt64, year: UInt) {
        self.title = title
        self.author = author
        self.publisher = publisher
        self.isbn = isbn
        self.year = year
    }
}

class Stack<T> {
    var things = [T]()
    func add(_ t: T) {
        things.append(t)
    }
}

var stackBooks = Stack<Book>()
var petitPrince = Book(title: "Le Petit Prince", author: "Antoine St-ExupÃ©ry", publisher: "France", isbn: 54893785734895734, year: 1943)
var animalFarm = Book(title: "Animal Farm", author: "George Orwell", publisher: "English House", isbn: 789547375893495834, year: 1954)
var barackObama = Book(title: "Barack Obama Campaign", author: "Barack Obama", publisher: "President", isbn: 53428957875934543, year: 2008)

stackBooks.add(petitPrince)
stackBooks.add(animalFarm)
stackBooks.add(barackObama)

for book in stackBooks.things {
    print(book.title)
}

class Unite: Hashable, Equatable {
    var a: String
    var b: [UInt]

    init(a: String, b: [UInt]) {
        self.a = a
        self.b = b
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(self.a)
    }

    static func == (lhs: Unite, rhs: Unite) -> Bool {
        return lhs.a == rhs.a
    }
}

var monEnsemble: Set<Unite> = []

var unite1 = Unite(a: "geneve", b: [12, 6, 89])
var unite2 = Unite(a: "bern", b: [45, 61, 99])
var unite3 = Unite(a: "bale", b: [120, 62, 77])
var unite4 = Unite(a: "zurich", b: [18, 66, 66])
var unite5 = Unite(a: "lausanne", b: [10, 67, 55])

monEnsemble.insert(unite1)
monEnsemble.insert(unite2)
monEnsemble.insert(unite3)
monEnsemble.insert(unite4)
monEnsemble.insert(unite5)

let resultats = monEnsemble.filter { $0.a == "lugano" }

for element in monEnsemble {
    if element.a == "lausanne" {
        print(element.b)
    }
}

